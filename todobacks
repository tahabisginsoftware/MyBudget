import React from 'react';
import { StatusBar } from 'expo-status-bar';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { StyleSheet, Text, View, TouchableOpacity, FlatList, TextInput, ScrollView, Alert, useColorScheme } from 'react-native';
import { useFonts } from 'expo-font';
import * as SplashScreen from 'expo-splash-screen';
import Icon from 'react-native-vector-icons/MaterialIcons';
import HideWithKeyboard from 'react-native-hide-with-keyboard';
import { formatCurrency, getSupportedCurrencies } from "react-native-format-currency";
import AsyncStorage from '@react-native-async-storage/async-storage';

SplashScreen.preventAutoHideAsync();

function AddExpense() {}

  function Home() {

  const [textInput, setTextInput] = React.useState('');

  const [todos, setTodos] = React.useState([]);
  React.useEffect(()=>{
    loadTodo();
  },[]);
  React.useEffect(()=> {
    saveTodo(todos);
  },[todos]);

  const ListItem = ({todo}) => {
    return (
    <View style={[styles.listitem]}>
      <View style={{flex: 1}}>
      <Text style={{fontWeight: 'bold', 
      fontSize: 15, 
      color: todo?.completed?'black':"black",
      textDecorationLine: todo?.completed?"line-through":"none"}}>
        {todo?.task}
        </Text>
        </View>
        {!todo?.completed && (
      <TouchableOpacity style={[styles.actionIcon]} onPress={() => markTodoComplete(todo?.id)}>
      <IonIcon name="checkmark" color= "white" size={24}/>
      </TouchableOpacity>
          )}
      <TouchableOpacity style={[styles.actionIcon,{backgroundColor:"red"}]} onPress={() => deleteTodo(todo?.id)}>
      <IonIcon name="trash-outline" color= "white" size={20}/>
      </TouchableOpacity>
    </View>
    );
  };

  const saveTodo = async todos =>{
      try {
        const stringifyToo = JSON.stringify(todos);
        await AsyncStorage.setItem('todos', stringifyToo);
      } catch (e) {
        // saving error
        console.log('error while saving!');
      }
  };

  const loadTodo = async () => {
    try{
      const todos = await AsyncStorage.getItem("todos");
      if(todos != null){
        setTodos(JSON.parse(todos));
      }
    }catch(error){
      console.log('error while loading!')
    }
  };

  const addTodo = () =>{
    if(textInput == ""){
      Alert.alert('Error', "Please type in your Todo!")
    }else{
    const newTodo={
      id: Math.random(),
      task: textInput,
      completed: false,
    };
    setTodos([...todos, newTodo]);
    setTextInput('');
    }
  };

  const markTodoComplete = (todoId) => {
    const newTodos = todos.map((item)=>{
      if(item.id == todoId){
        return{...item,completed:true}
      }
      return item;
    });
    setTodos(newTodos);
  };

  const deleteTodo = (todoId) => {
    const newTodos = todos.filter(item => item.id != todoId);
    setTodos(newTodos);
  };

  const clearAll = () => {
    Alert.alert('Warning', 'Are you sure to delete all Todos?',[
      {text:'No'},
      {text: 'Yes', onPress:()=>setTodos([])},
  ])};

  return(
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Balance</Text>
        <Text style={styles.balanceStyle}>5.987,34â‚¬</Text>
      </View>
      <View style={styles.Divider}></View>
      <View style={{justifyContent:'center', alignItems:'center',paddingTop:0, flex:1}}>
      <FlatList
      showsVerticalScrollIndicator={false}
      contentContainerStyle={{padding: 20, paddingBottom: 100}} 
      data={todos}
      renderItem={({item}) => (<ListItem todo={item}/>)}
      />
      </View>
      <View style={styles.footer}>
      <TextInput
        placeholder="Add Todo"
        style={styles.inputContainer}
        value = {textInput}
        onChangeText = {text => setTextInput(text)}
        onSubmitEditing = {addTodo}
        maxLength = {100}
        />
      <TouchableOpacity
      onPress={addTodo}> 
      <View style={[styles.AddButton]}><Icon name='add' size={30} color = 'white'/></View>
      </TouchableOpacity>
      </View>
    </View>
  );
}

const Stack = createStackNavigator();

function Stacks() {
  return (
    <Stack.Navigator>
      <Stack.Screen
        name="MyBudget"
        component={Home}
        options={{
          headerTintColor: 'white',
          headerTitleAlign: 'center',
          headerTitleStyle:{fontFamily:'InterBold', fontSize: 20},
          headerStyle: { backgroundColor: 'black' },
        }}
      />
      <Stack.Screen
        name="AddExpense"
        component={AddExpense}
        options={{ 
          headerLeft: ()=> null,
          headerTitle: 'MyBudget',
          headerTintColor: 'white',
          headerTitleAlign: 'center',
          headerTitleStyle:{fontFamily:'InterBold', fontSize: 20},
          headerStyle: { backgroundColor: 'black' }, 
        }}
      />
    </Stack.Navigator>
  );
}

export default function App(){
  const [fontsLoaded] = useFonts({
    'InterBold': require('./assets/fonts/InterBold.ttf'),
    'InterMedium': require('./assets/fonts/InterMedium.ttf'),
    'InterRegular': require('./assets/fonts/InterRegular.ttf'),
  });

  React.useEffect(() => {
    async function prepare() {
      await SplashScreen.preventAutoHideAsync();
    }
    prepare();
  }, []);

  if (!fontsLoaded) {
    return undefined;
  } else {
    SplashScreen.hideAsync();
  }
  return (
    <NavigationContainer>
      <Stacks/>
      <StatusBar style="light"/>
    </NavigationContainer>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'white',
  },
  listitem: {
    padding: 20,
    flexDirection: 'row',
    elevation: 12,
    borderRadius: 7,
    marginVertical: 10,
    alignItems: 'center',
  },
  Divider:{
  borderBottomWidth:1, 
  width:"100%",
  paddingTop:30,
  borderBottomColor: '#F0F0F0'
  },
  header:{
    paddingLeft:35,
    paddingTop:30,
    flexDirection: 'column',
    alignItems: 'flex-start',
    justifyContent: 'space-between',
  },
  headerTitle:{
    fontSize: 20,
    fontFamily: 'InterMedium',
  },
  ExpenseTitle:{
    paddingBottom:18.5,
    fontSize:36,
    fontFamily: 'InterBold'
  },
  AddButton: {
    width: 64,
    height: 64,
    alignItems: 'center',
    borderRadius: 35,
    backgroundColor: 'black',
    elevation: 40,
    justifyContent: 'center',
    bottom: 10,
    marginTop:20,
  },
  AddExpenseButton:{
    width: 360,
    height: 70,
    alignItems: 'center',
    justifyContent:'center',
    backgroundColor: 'black',
    top:14
  },
  CancelButton:{
    width: 360,
    height: 70,
    alignItems: 'center',
    justifyContent:'center',
    backgroundColor: '#FF6666',
    top:14
  },
  balanceStyle:{
    bottom:5,
    fontSize: 32,
    fontFamily: 'InterMedium',
    color:'#37AF60'
  },
  
  footer:{
    backgroundColor: 'white',
    position: 'absolute',
    bottom: 0,
    //backgroundColor: '#F1F2F2',
    flexDirection: 'row',
    width: '100%',
    alignItems: 'center',
    paddingHorizontal: 20,
  },
  footerAddEdit:{
    position: 'absolute',
    bottom: 14,
    backgroundColor: 'white',
    width: '100%',
    alignItems: 'center',
    paddingHorizontal: 20,
  },
  itemContainer: {
    right: 5,
    width: 332,
    height: 70,
    flexDirection: 'row',
    backgroundColor: 'white',
    elevation: 12,
    padding: 20,
    justifyContent: 'space-between',
    marginVertical: 10,
    borderRadius: 10,
  },
  ExpenseContainer: {
    right: 5,
    width: 332,
    height: 70,
    flexDirection: 'row',
    backgroundColor: 'white',
    elevation: 12,
    padding: 20,
    justifyContent: 'space-between',
    marginVertical: 10,
    borderRadius: 10,
    borderWidth: 1
  },
  title: {
    fontSize: 20,
    fontFamily: 'InterRegular'
  },
  amount: {
    color: '#37AF60',
    fontSize: 20,
    fontFamily: 'InterRegular',
  },
  negativeAmount: {
    color: '#C74141',
    fontSize: 20,
    fontFamily: 'InterRegular'
  },
  date:{
    fontSize:  15,
    color: '#616161'
  },
  dateContainer:{
    right:9,
    justifyContent: 'center',
    alignItems: 'flex-start'
  },
  inputContainer: {
    backgroundColor: 'white',
    elevation: 40,
    flex: 1,
    height: 50,
    marginVertical: 20,
    marginRight: 20,
    borderRadius: 30,
    paddingHorizontal: 20,
  },
});

